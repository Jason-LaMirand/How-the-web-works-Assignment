Part One: Solidify Terminology
In your own terms, define the following terms:

1. What is HTTP?
    HTTP stands for Hypertext Transfer Protocol. Which is a type of way to communicate to a server.
2. What is a URL?
    A URL is referred to as a web address and stands for Uniform Resource Locator. Its purpose is to tell the browers how and where to retrieve a resource.
3. What is DNS?
    DNS stands for Domain Name System. Basically it is where alot of IP Addresses are stored world wide.
4. What is a query string?
    Provides extra information for when searching for a web page. You will find it at the end of the URL.
5. What are two HTTP verbs and how are they different?
    GET and POST. GET gives you data from the server, while POST sends data tot the server.
6. What is an HTTP request?
    A way of getting information from a server. From the client to the server.
7. What is an HTTP response?
    A way of communicating that the request has been carried out. From the server tot he client.
8. What is an HTTP header? Give a couple examples of request and response headers you have seen.
    A field or area withing a HTTP Request tog et more additional information.
9. What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
    Starts from your BROWSER to the COMPUTER CACHE. If you cant find the IP Address then it moves on to the ROUTER. 
    If you cant find the IP Address then it moves on to the ISP and then to the DNS Server till you get the web page to pull up.

Part Two: Practice Tools

1. Using curl, make a GET request to the icanhazdadjoke.com API to find all jokes involving the word “pirate”

2. Use dig to find what the IP address is for icanhazdadjoke.com
    104.21.37.176 or 172.67.211.64
3. Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.

Part Three: Explore Dev Tools

1. Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

2. Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

3. Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.

